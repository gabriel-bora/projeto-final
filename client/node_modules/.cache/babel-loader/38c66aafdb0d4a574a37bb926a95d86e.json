{"ast":null,"code":"const {\n  BYTE_SIZE\n} = require('./defaults');\nconst CHANNEL_COUNT = ['r', 'g', 'b', 'a'].length;\nconst countBytesForNRgbBytes = n => Math.floor(n * BYTE_SIZE * CHANNEL_COUNT / (CHANNEL_COUNT - 1));\nconst isAlphaByte = (_, i) => !((i + 1) % CHANNEL_COUNT);\nconst isRgbByte = (_, i) => (i + 1) % CHANNEL_COUNT;\nconst recombineRgbAndAlpha = (rgb, alpha) => Buffer.from(Array(rgb.length + alpha.length).fill(null).map((_, i) => (i + 1) % CHANNEL_COUNT ? rgb[i - Math.floor(i / CHANNEL_COUNT)] : alpha[i % CHANNEL_COUNT]));\nconst splitRgbAndAlpha = data => {\n  const rgbBytes = data.filter(isRgbByte);\n  const alphaBytes = data.filter(isAlphaByte);\n  return [rgbBytes, alphaBytes];\n};\nmodule.exports = {\n  countBytesForNRgbBytes,\n  isAlphaByte,\n  isRgbByte,\n  recombineRgbAndAlpha,\n  splitRgbAndAlpha\n};","map":{"version":3,"names":["BYTE_SIZE","require","CHANNEL_COUNT","length","countBytesForNRgbBytes","n","Math","floor","isAlphaByte","_","i","isRgbByte","recombineRgbAndAlpha","rgb","alpha","Buffer","from","Array","fill","map","splitRgbAndAlpha","data","rgbBytes","filter","alphaBytes","module","exports"],"sources":["D:/Documents/QQTech/projeto-final/client/node_modules/steggy-noencrypt/lib/png.js"],"sourcesContent":["const { BYTE_SIZE } = require('./defaults')\nconst CHANNEL_COUNT = ['r', 'g', 'b', 'a'].length\n\nconst countBytesForNRgbBytes = n => Math.floor(n * BYTE_SIZE * CHANNEL_COUNT / (CHANNEL_COUNT - 1))\n\nconst isAlphaByte = (_, i) => !((i + 1) % CHANNEL_COUNT)\nconst isRgbByte = (_, i) => (i + 1) % CHANNEL_COUNT\n\nconst recombineRgbAndAlpha = (rgb, alpha) =>\n  Buffer.from(\n    Array(rgb.length + alpha.length)\n      .fill(null)\n      .map((_, i) => (i + 1) % CHANNEL_COUNT\n        ? rgb[i - Math.floor(i / CHANNEL_COUNT)]\n        : alpha[i % CHANNEL_COUNT]\n      )\n  )\n\nconst splitRgbAndAlpha = data => {\n  const rgbBytes = data.filter(isRgbByte)\n  const alphaBytes = data.filter(isAlphaByte)\n  return [rgbBytes, alphaBytes]\n}\n\nmodule.exports = {\n  countBytesForNRgbBytes,\n  isAlphaByte,\n  isRgbByte,\n  recombineRgbAndAlpha,\n  splitRgbAndAlpha,\n}\n"],"mappings":"AAAA,MAAM;EAAEA;AAAU,CAAC,GAAGC,OAAO,CAAC,YAAY,CAAC;AAC3C,MAAMC,aAAa,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAACC,MAAM;AAEjD,MAAMC,sBAAsB,GAAGC,CAAC,IAAIC,IAAI,CAACC,KAAK,CAACF,CAAC,GAAGL,SAAS,GAAGE,aAAa,IAAIA,aAAa,GAAG,CAAC,CAAC,CAAC;AAEnG,MAAMM,WAAW,GAAG,CAACC,CAAC,EAAEC,CAAC,KAAK,EAAE,CAACA,CAAC,GAAG,CAAC,IAAIR,aAAa,CAAC;AACxD,MAAMS,SAAS,GAAG,CAACF,CAAC,EAAEC,CAAC,KAAK,CAACA,CAAC,GAAG,CAAC,IAAIR,aAAa;AAEnD,MAAMU,oBAAoB,GAAG,CAACC,GAAG,EAAEC,KAAK,KACtCC,MAAM,CAACC,IAAI,CACTC,KAAK,CAACJ,GAAG,CAACV,MAAM,GAAGW,KAAK,CAACX,MAAM,CAAC,CAC7Be,IAAI,CAAC,IAAI,CAAC,CACVC,GAAG,CAAC,CAACV,CAAC,EAAEC,CAAC,KAAK,CAACA,CAAC,GAAG,CAAC,IAAIR,aAAa,GAClCW,GAAG,CAACH,CAAC,GAAGJ,IAAI,CAACC,KAAK,CAACG,CAAC,GAAGR,aAAa,CAAC,CAAC,GACtCY,KAAK,CAACJ,CAAC,GAAGR,aAAa,CAAC,CAC3B,CACJ;AAEH,MAAMkB,gBAAgB,GAAGC,IAAI,IAAI;EAC/B,MAAMC,QAAQ,GAAGD,IAAI,CAACE,MAAM,CAACZ,SAAS,CAAC;EACvC,MAAMa,UAAU,GAAGH,IAAI,CAACE,MAAM,CAACf,WAAW,CAAC;EAC3C,OAAO,CAACc,QAAQ,EAAEE,UAAU,CAAC;AAC/B,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAG;EACftB,sBAAsB;EACtBI,WAAW;EACXG,SAAS;EACTC,oBAAoB;EACpBQ;AACF,CAAC"},"metadata":{},"sourceType":"script"}