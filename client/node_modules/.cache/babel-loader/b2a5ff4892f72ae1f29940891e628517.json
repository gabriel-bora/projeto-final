{"ast":null,"code":"'use strict';\n\nvar constants = require('./constants');\nmodule.exports = function (dataIn, width, height, options) {\n  var outHasAlpha = [constants.COLORTYPE_COLOR_ALPHA, constants.COLORTYPE_ALPHA].indexOf(options.colorType) !== -1;\n  if (options.colorType === options.inputColorType) {\n    var bigEndian = function () {\n      var buffer = new ArrayBuffer(2);\n      new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n      // Int16Array uses the platform's endianness.\n      return new Int16Array(buffer)[0] !== 256;\n    }();\n    // If no need to convert to grayscale and alpha is present/absent in both, take a fast route\n    if (options.bitDepth === 8 || options.bitDepth === 16 && bigEndian) {\n      return dataIn;\n    }\n  }\n\n  // map to a UInt16 array if data is 16bit, fix endianness below\n  var data = options.bitDepth !== 16 ? dataIn : new Uint16Array(dataIn.buffer);\n  var maxValue = 255;\n  var inBpp = constants.COLORTYPE_TO_BPP_MAP[options.inputColorType];\n  if (inBpp === 4 && !options.inputHasAlpha) {\n    inBpp = 3;\n  }\n  var outBpp = constants.COLORTYPE_TO_BPP_MAP[options.colorType];\n  if (options.bitDepth === 16) {\n    maxValue = 65535;\n    outBpp *= 2;\n  }\n  var outData = new Buffer(width * height * outBpp);\n  var inIndex = 0;\n  var outIndex = 0;\n  var bgColor = options.bgColor || {};\n  if (bgColor.red === undefined) {\n    bgColor.red = maxValue;\n  }\n  if (bgColor.green === undefined) {\n    bgColor.green = maxValue;\n  }\n  if (bgColor.blue === undefined) {\n    bgColor.blue = maxValue;\n  }\n  function getRGBA() {\n    var red;\n    var green;\n    var blue;\n    var alpha = maxValue;\n    switch (options.inputColorType) {\n      case constants.COLORTYPE_COLOR_ALPHA:\n        alpha = data[inIndex + 3];\n        red = data[inIndex];\n        green = data[inIndex + 1];\n        blue = data[inIndex + 2];\n        break;\n      case constants.COLORTYPE_COLOR:\n        red = data[inIndex];\n        green = data[inIndex + 1];\n        blue = data[inIndex + 2];\n        break;\n      case constants.COLORTYPE_ALPHA:\n        alpha = data[inIndex + 1];\n        red = data[inIndex];\n        green = red;\n        blue = red;\n        break;\n      case constants.COLORTYPE_GRAYSCALE:\n        red = data[inIndex];\n        green = red;\n        blue = red;\n        break;\n      default:\n        throw new Error('input color type:' + options.inputColorType + ' is not supported at present');\n    }\n    if (options.inputHasAlpha) {\n      if (!outHasAlpha) {\n        alpha /= maxValue;\n        red = Math.min(Math.max(Math.round((1 - alpha) * bgColor.red + alpha * red), 0), maxValue);\n        green = Math.min(Math.max(Math.round((1 - alpha) * bgColor.green + alpha * green), 0), maxValue);\n        blue = Math.min(Math.max(Math.round((1 - alpha) * bgColor.blue + alpha * blue), 0), maxValue);\n      }\n    }\n    return {\n      red: red,\n      green: green,\n      blue: blue,\n      alpha: alpha\n    };\n  }\n  for (var y = 0; y < height; y++) {\n    for (var x = 0; x < width; x++) {\n      var rgba = getRGBA(data, inIndex);\n      switch (options.colorType) {\n        case constants.COLORTYPE_COLOR_ALPHA:\n        case constants.COLORTYPE_COLOR:\n          if (options.bitDepth === 8) {\n            outData[outIndex] = rgba.red;\n            outData[outIndex + 1] = rgba.green;\n            outData[outIndex + 2] = rgba.blue;\n            if (outHasAlpha) {\n              outData[outIndex + 3] = rgba.alpha;\n            }\n          } else {\n            outData.writeUInt16BE(rgba.red, outIndex);\n            outData.writeUInt16BE(rgba.green, outIndex + 2);\n            outData.writeUInt16BE(rgba.blue, outIndex + 4);\n            if (outHasAlpha) {\n              outData.writeUInt16BE(rgba.alpha, outIndex + 6);\n            }\n          }\n          break;\n        case constants.COLORTYPE_ALPHA:\n        case constants.COLORTYPE_GRAYSCALE:\n          // Convert to grayscale and alpha\n          var grayscale = (rgba.red + rgba.green + rgba.blue) / 3;\n          if (options.bitDepth === 8) {\n            outData[outIndex] = grayscale;\n            if (outHasAlpha) {\n              outData[outIndex + 1] = rgba.alpha;\n            }\n          } else {\n            outData.writeUInt16BE(grayscale, outIndex);\n            if (outHasAlpha) {\n              outData.writeUInt16BE(rgba.alpha, outIndex + 2);\n            }\n          }\n          break;\n        default:\n          throw new Error('unrecognised color Type ' + options.colorType);\n      }\n      inIndex += inBpp;\n      outIndex += outBpp;\n    }\n  }\n  return outData;\n};","map":{"version":3,"names":["constants","require","module","exports","dataIn","width","height","options","outHasAlpha","COLORTYPE_COLOR_ALPHA","COLORTYPE_ALPHA","indexOf","colorType","inputColorType","bigEndian","buffer","ArrayBuffer","DataView","setInt16","Int16Array","bitDepth","data","Uint16Array","maxValue","inBpp","COLORTYPE_TO_BPP_MAP","inputHasAlpha","outBpp","outData","Buffer","inIndex","outIndex","bgColor","red","undefined","green","blue","getRGBA","alpha","COLORTYPE_COLOR","COLORTYPE_GRAYSCALE","Error","Math","min","max","round","y","x","rgba","writeUInt16BE","grayscale"],"sources":["D:/Documents/QQTech/projeto-final/client/node_modules/pngjs/lib/bitpacker.js"],"sourcesContent":["'use strict';\n\nvar constants = require('./constants');\n\nmodule.exports = function(dataIn, width, height, options) {\n  var outHasAlpha = [constants.COLORTYPE_COLOR_ALPHA, constants.COLORTYPE_ALPHA].indexOf(options.colorType) !== -1;\n  if (options.colorType === options.inputColorType) {\n    var bigEndian = (function() {\n      var buffer = new ArrayBuffer(2);\n      new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n      // Int16Array uses the platform's endianness.\n      return new Int16Array(buffer)[0] !== 256;\n    })();\n    // If no need to convert to grayscale and alpha is present/absent in both, take a fast route\n    if (options.bitDepth === 8 || (options.bitDepth === 16 && bigEndian)) {\n      return dataIn;\n    }\n  }\n\n  // map to a UInt16 array if data is 16bit, fix endianness below\n  var data = options.bitDepth !== 16 ? dataIn : new Uint16Array(dataIn.buffer);\n\n  var maxValue = 255;\n  var inBpp = constants.COLORTYPE_TO_BPP_MAP[options.inputColorType];\n  if (inBpp === 4 && !options.inputHasAlpha) {\n    inBpp = 3;\n  }\n  var outBpp = constants.COLORTYPE_TO_BPP_MAP[options.colorType];\n  if (options.bitDepth === 16) {\n    maxValue = 65535;\n    outBpp *= 2;\n  }\n  var outData = new Buffer(width * height * outBpp);\n\n  var inIndex = 0;\n  var outIndex = 0;\n\n  var bgColor = options.bgColor || {};\n  if (bgColor.red === undefined) {\n    bgColor.red = maxValue;\n  }\n  if (bgColor.green === undefined) {\n    bgColor.green = maxValue;\n  }\n  if (bgColor.blue === undefined) {\n    bgColor.blue = maxValue;\n  }\n\n  function getRGBA() {\n    var red;\n    var green;\n    var blue;\n    var alpha = maxValue;\n    switch (options.inputColorType) {\n      case constants.COLORTYPE_COLOR_ALPHA:\n        alpha = data[inIndex + 3];\n        red = data[inIndex];\n        green = data[inIndex + 1];\n        blue = data[inIndex + 2];\n        break;\n      case constants.COLORTYPE_COLOR:\n        red = data[inIndex];\n        green = data[inIndex + 1];\n        blue = data[inIndex + 2];\n        break;\n      case constants.COLORTYPE_ALPHA:\n        alpha = data[inIndex + 1];\n        red = data[inIndex];\n        green = red;\n        blue = red;\n        break;\n      case constants.COLORTYPE_GRAYSCALE:\n        red = data[inIndex];\n        green = red;\n        blue = red;\n        break;\n      default:\n        throw new Error('input color type:' + options.inputColorType + ' is not supported at present');\n    }\n\n    if (options.inputHasAlpha) {\n      if (!outHasAlpha) {\n        alpha /= maxValue;\n        red = Math.min(Math.max(Math.round((1 - alpha) * bgColor.red + alpha * red), 0), maxValue);\n        green = Math.min(Math.max(Math.round((1 - alpha) * bgColor.green + alpha * green), 0), maxValue);\n        blue = Math.min(Math.max(Math.round((1 - alpha) * bgColor.blue + alpha * blue), 0), maxValue);\n      }\n    }\n    return { red: red, green: green, blue: blue, alpha: alpha };\n  }\n\n  for (var y = 0; y < height; y++) {\n    for (var x = 0; x < width; x++) {\n      var rgba = getRGBA(data, inIndex);\n\n      switch (options.colorType) {\n        case constants.COLORTYPE_COLOR_ALPHA:\n        case constants.COLORTYPE_COLOR:\n          if (options.bitDepth === 8) {\n            outData[outIndex] = rgba.red;\n            outData[outIndex + 1] = rgba.green;\n            outData[outIndex + 2] = rgba.blue;\n            if (outHasAlpha) {\n              outData[outIndex + 3] = rgba.alpha;\n            }\n          }\n          else {\n            outData.writeUInt16BE(rgba.red, outIndex);\n            outData.writeUInt16BE(rgba.green, outIndex + 2);\n            outData.writeUInt16BE(rgba.blue, outIndex + 4);\n            if (outHasAlpha) {\n              outData.writeUInt16BE(rgba.alpha, outIndex + 6);\n            }\n          }\n          break;\n        case constants.COLORTYPE_ALPHA:\n        case constants.COLORTYPE_GRAYSCALE:\n          // Convert to grayscale and alpha\n          var grayscale = (rgba.red + rgba.green + rgba.blue) / 3;\n          if (options.bitDepth === 8) {\n            outData[outIndex] = grayscale;\n            if (outHasAlpha) {\n              outData[outIndex + 1] = rgba.alpha;\n            }\n          }\n          else {\n            outData.writeUInt16BE(grayscale, outIndex);\n            if (outHasAlpha) {\n              outData.writeUInt16BE(rgba.alpha, outIndex + 2);\n            }\n          }\n          break;\n        default:\n          throw new Error('unrecognised color Type ' + options.colorType);\n      }\n\n      inIndex += inBpp;\n      outIndex += outBpp;\n    }\n  }\n\n  return outData;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}